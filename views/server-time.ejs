<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>서버 시간 확인하기</title>
    <meta name="description" content="쉽게 웹사이트 서버 시간을 확인할 수 있습니다.">
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Black+Han+Sans&display=swap" rel="stylesheet">
		
		<link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR&family=Sunflower:wght@300&display=swap" rel="stylesheet">
    
    <link rel="icon" href="/images/logo.png" />
    <link rel="stylesheet" href="/css/common.css" />
    <link rel="stylesheet" href="/css/server-time.css" />
    
    
    
    <style>
     	footer {
	    	position: relative;
        margin-top:100px;
      } 
      #Accordion_wrap {
        position: fixed;
        width: 100%;
      }
      main {
				margin-top: 0;
	  	}
	  	.container{margin: 150px 0 30px 0;}
    </style>
  </head>
  <body>
    <%- include('./nav') %>
    <%- include('./accordion') %>
    
    <main>
    	<div class="container">
    	<h1 class="title-txt">서버 시간 확인하기</h1>
    		<div class="url-input-wrap">
    			<input type="text" class="search" id="urlInput" placeholder="웹사이트 url을 입력하세요." />
    		</div>
    		<button class="get-time-btn" onclick="checkUrl()">서버 시간 가져오기</button>
    		<div class="result-container">
    			<div class="url-data-wrap">
    				<p id="url-data"></p>
    			</div>
    			<div class="server-time-wrap">
    				<p id="serverTime"></p>
    			</div>

    		</div>
    		
    		<div class="how_to_use">
          <div class="htu_h3"><h3>소개</h3></div>
          <div class="description">
           <p><span style="font-weight: 600;">"서버 시간 확인하기"</span>는 사용자가 입력한 URL을 통해 특정 웹 사이트에 HTTP 요청을 보내고, 
           해당 사이트로부터 받은 응답 헤더에서 서버의 시간 정보를 추출하여 사용자에게 제공합니다.</p>

					<p>이 서비스는 사용자가 확인하고자 하는 웹 사이트의 URL을 입력하면, 
					그 웹 사이트에 대해 HTTP 요청을 보내, HTTP 응답을 생성하여 응답 헤더를 반환하는데, 이 중 해당 웹 서버의 현재 시간을 나타내는 'Date' 필드를 추출해 사용자에게 제공해 줍니다.</p>

					<p>이러한 기능은 다양한 상황에서 활용될 수 있습니다. 
					예를 들어, 수강 신청이나 티켓 예매와 같은 선착순 작업에서 정확한 시간 정보는 매우 중요합니다. 
					서버 시간을 확인함으로써 사용자는 해당 작업을 제 시간에 수행할 수 있게 됩니다. 이 서비스는 사용자에게 편의성을 제공하며, 
					선착순 작업에 참여하는 데 도움이 될 수 있습니다.</p>

            
          </div>
        </div>
    		
    		<div class="how_to_use">
          <div class="htu_h3"><h3>사용 방법</h3></div>
          <div class="description">
            <p>1. 서버 시간을 알고 싶은 웹 사이트의 url을 복사합니다(https://example.com)</p>
            <p>2. <span style="font-weight: 600;">"서버 시간 가져오기"</span> 버튼을 클릭합니다.</p>
            <p>3. 하단에 url과 해당 웹 서버의 시간이 표시됩니다.</p>
          </div>
        </div>
    	</div>
    </main>
        
    <!-- footer -->
    <%- include('./footer') %>

    <script src="/js/common.js"></script>
    <script src="/js/server-time.js"></script>

    <script>
    const urlInput = document.querySelector("#urlInput");
    const urlData = document.querySelector("#url-data");
    const timeData = document.querySelector("#serverTime");
    const resultContainer = document.querySelector(".result-container");
    resultContainer.style.display = "none";
    let time;

    function getServerTime(clientTime) {
        const targetUrl = urlInput.value;

        fetch("/mlabolatories/get-server-time", {
          method: 'POST',
          headers: {'Content-Type': 'application/json',},
          body: JSON.stringify({ url: targetUrl }),
        })
        .then(response => {
            if (response.ok) {
                return response.text();
            } else {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
        })
        .then(data => {
            const serverTimestamp = Date.parse(data);
            if (!isNaN(serverTimestamp)) {
                serverTime = new Date(serverTimestamp);
                updateDisplay(); // 최초 가져온 시간을 화면에 표시
                if (targetUrl.length > 50) {
                    urlData.textContent = targetUrl.substring(0, 50) + "...의 서버 시간";
                } else {
                    urlData.textContent = targetUrl + "의 서버 시간";
                }
                setInterval(updateDisplay, 1000); // 1초마다 업데이트     
            } else {
                throw new Error(`Invalid date format: ${data}`);
            }
        })
        .catch(error => {
            console.error('Error fetching server time:', error);
            timeData.textContent = '서버 시간을 가져오지 못했습니다.';
            urlData.style.display = "none";
        });

    }


    function updateDisplay() {
        const elapsedMilliseconds = new Date() - clientTime; // 클라이언트에서의 경과 시간
        const adjustedServerTime = new Date(serverTime.getTime() + elapsedMilliseconds);

        const year = adjustedServerTime.getFullYear();
        const month = (adjustedServerTime.getMonth() + 1).toString().padStart(2, "0");
        const day = adjustedServerTime.getDate().toString().padStart(2, "0");
        const hours = adjustedServerTime.getHours().toString().padStart(2, "0");
        const minutes = adjustedServerTime.getMinutes().toString().padStart(2, "0");
        const seconds = adjustedServerTime.getSeconds().toString().padStart(2, "0");

        const formattedDate = `${year}년 ${month}월 ${day}일 ${hours}:${minutes}:${seconds}`;
        timeData.textContent = formattedDate;
        urlData.style.display = "block";
        resultContainer.style.display = "flex";
    }

    //입력받은 url이 유효한 지 
    function checkUrl() {
        if (urlInput.value.trim()) {
        		clientTime = new Date(); // 클라이언트의 현재 시간
            getServerTime(clientTime);
        }
    }

    </script>
  </body>
</html>
